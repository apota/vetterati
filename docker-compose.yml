version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: vetterati_ats
      POSTGRES_USER: ats_user
      POSTGRES_PASSWORD: ats_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ats_user -d vetterati_ats"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ats-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ats-network

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ats-network

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: ats_user
      RABBITMQ_DEFAULT_PASS: ats_password
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - ats-network

  # LocalStack - Local AWS Cloud Stack
  localstack:
    image: localstack/localstack:latest
    ports:
      - "4566:4566"  # LocalStack Gateway
    environment:
      - DEBUG=1
      - SERVICES=s3,dynamodb,sqs,sns
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ats-network

  # LocalStack Resource Initializer
  localstack-init:
    image: amazon/aws-cli:latest
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ENDPOINT_URL=http://localstack:4566
    networks:
      - ats-network
    command: >
      sh -c "
        echo 'Waiting for LocalStack to be ready...' &&
        sleep 10 &&
        echo 'Creating S3 bucket...' &&
        aws --endpoint-url=http://localstack:4566 s3 mb s3://vetterati-resumes &&
        echo 'Creating DynamoDB tables...' &&
        aws --endpoint-url=http://localstack:4566 dynamodb create-table --table-name analytics-events --attribute-definitions AttributeName=id,AttributeType=S AttributeName=timestamp,AttributeType=N --key-schema AttributeName=id,KeyType=HASH AttributeName=timestamp,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 &&
        aws --endpoint-url=http://localstack:4566 dynamodb create-table --table-name user-analytics --attribute-definitions AttributeName=userId,AttributeType=S AttributeName=date,AttributeType=S --key-schema AttributeName=userId,KeyType=HASH AttributeName=date,KeyType=RANGE --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 &&
        echo 'Creating SNS topic...' &&
        aws --endpoint-url=http://localstack:4566 sns create-topic --name vetterati-notifications &&
        echo 'Creating SQS queue...' &&
        aws --endpoint-url=http://localstack:4566 sqs create-queue --queue-name vetterati-notifications &&
        echo 'AWS resources initialized successfully!'
      "

  # Authentication Service (C#)
  auth-service:
    build:
      context: .
      dockerfile: ./src/services/auth-service/Dockerfile
    ports:
      - "5001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=vetterati_ats;Username=ats_user;Password=ats_password
      - ConnectionStrings__Redis=redis:6379
      - Jwt__SecretKey=your-super-secret-jwt-key-for-docker-that-is-at-least-32-characters-long-and-secure
      - Jwt__Issuer=vetterati-ats
      - Jwt__Audience=vetterati-ats
      - Jwt__ExpiryMinutes=60
      - Jwt__RefreshTokenExpiryDays=30
      - PasswordPolicy__MinLength=8
      - PasswordPolicy__MaxLength=128
      - PasswordPolicy__RequireUppercase=true
      - PasswordPolicy__RequireLowercase=true
      - PasswordPolicy__RequireDigit=true
      - PasswordPolicy__RequireSpecialChar=true
      - PasswordPolicy__MaxFailedAttempts=5
      - PasswordPolicy__LockoutDuration=00:15:00
      - RateLimit__AnonymousUserLimit=100
      - RateLimit__AuthenticatedUserLimit=1000
      - RateLimit__AdminUserLimit=5000
      - Frontend__BaseUrl=http://localhost:3000
      - Email__SendGrid__ApiKey=demo-sendgrid-key
      - Email__SendGrid__FromEmail=noreply@vetterati.com
      - Email__SendGrid__FromName=Vetterati ATS
      - Email__Smtp__Host=smtp.gmail.com
      - Email__Smtp__Port=587
      - Email__Smtp__Username=demo@vetterati.com
      - Email__Smtp__Password=demo-password
      - Email__Smtp__EnableSsl=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - ats-network

  # Resume Management Service (Python)
  resume-service:
    build:
      context: ./src/services/resume-service
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - DATABASE_URL=postgresql://ats_user:ats_password@postgres:5432/vetterati_ats
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - S3_BUCKET_NAME=vetterati-resumes
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - localstack
    volumes:
      - ./temp/uploads:/app/uploads
    networks:
      - ats-network

  # AHP Engine Service (C#)
  ahp-service:
    build:
      context: .
      dockerfile: ./src/services/ahp-service/Dockerfile
    ports:
      - "5002:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=vetterati_ats;Username=ats_user;Password=ats_password
      - Redis__ConnectionString=redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - ats-network

  # Workflow Service (Python)
  workflow-service:
    build:
      context: ./src/services/workflow-service
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://ats_user:ats_password@postgres:5432/vetterati_ats
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ats_user:ats_password@rabbitmq:5672
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ats-network

  # Analytics Service (Python)
  analytics-service:
    build:
      context: ./src/services/analytics-service
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - DATABASE_URL=postgresql://ats_user:ats_password@postgres:5432/vetterati_ats
      - DYNAMODB_ENDPOINT=http://localstack:4566
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - postgres
      - localstack
      - elasticsearch
    networks:
      - ats-network

  # Job Service (Python)
  job-service:
    build:
      context: ./src/services/job-service
      dockerfile: Dockerfile
    ports:
      - "8004:8000"
    environment:
      - DATABASE_URL=postgresql://ats_user:ats_password@postgres:5432/vetterati_ats
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - ats-network

  # Candidate Service (Python)
  candidate-service:
    build:
      context: ./src/services/candidate-service
      dockerfile: Dockerfile
    ports:
      - "8005:8000"
    environment:
      - DATABASE_URL=postgresql://ats_user:ats_password@postgres:5432/vetterati_ats
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - ats-network

  # Notification Service (Python)
  notification-service:
    build:
      context: ./src/services/notification-service
      dockerfile: Dockerfile
    ports:
      - "8006:8000"
    environment:
      - DATABASE_URL=postgresql://ats_user:ats_password@postgres:5432/vetterati_ats
      - REDIS_URL=redis://redis:6379
      - RABBITMQ_URL=amqp://ats_user:ats_password@rabbitmq:5672
      - AWS_ENDPOINT_URL=http://localstack:4566
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - SNS_TOPIC_ARN=arn:aws:sns:us-east-1:000000000000:vetterati-notifications
      - SQS_QUEUE_URL=http://localstack:4566/000000000000/vetterati-notifications
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - localstack
    networks:
      - ats-network

  # API Gateway (C#)
  api-gateway:
    build:
      context: .
      dockerfile: ./src/services/api-gateway/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - Services__AuthService=http://auth-service:8080
      - Services__ResumeService=http://resume-service:8000
      - Services__AhpService=http://ahp-service
      - Services__WorkflowService=http://workflow-service:8000
      - Services__AnalyticsService=http://analytics-service:8000
      - Services__JobService=http://job-service:8000
      - Services__CandidateService=http://candidate-service:8000
      - Services__NotificationService=http://notification-service:8000
    depends_on:
      - auth-service
      - resume-service
      - ahp-service
      - workflow-service
      - analytics-service
      - job-service
      - candidate-service
      - notification-service
    networks:
      - ats-network

  # Frontend (React)
  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:5000
    depends_on:
      - api-gateway
    networks:
      - ats-network

volumes:
  postgres_data:
  elasticsearch_data:

networks:
  ats-network:
    driver: bridge
